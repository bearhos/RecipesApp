"use strict";
/*
 * Copyright (c) 2020 Mattia Panzeri <mattia.panzeri93@gmail.com>
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@oclif/core");
const chalk_1 = require("chalk");
const Listr = require("listr");
const node_fs_1 = require("node:fs");
const node_path_1 = require("node:path");
const sharp = require("sharp");
const file_utils_1 = require("../utils/file-utils");
var MaskType;
(function (MaskType) {
    MaskType[MaskType["roundedCorners"] = 0] = "roundedCorners";
    MaskType[MaskType["circle"] = 1] = "circle";
})(MaskType || (MaskType = {}));
const iOSIconSizes = [
    {
        baseSize: 20,
        name: 'Icon-Notification',
        scales: [2, 3],
    },
    {
        baseSize: 29,
        name: 'Icon-Small',
        scales: [2, 3],
    },
    {
        baseSize: 40,
        name: 'Icon-Spotlight-40',
        scales: [2, 3],
    },
    {
        baseSize: 60,
        name: 'Icon-60',
        scales: [2, 3],
    },
    {
        baseSize: 1024,
        idiom: 'ios-marketing',
        name: 'iTunesArtwork',
        scales: [1],
    },
];
const AndroidIconSizes = [
    {
        density: 'mdpi',
        size: 48,
    },
    {
        density: 'hdpi',
        size: 72,
    },
    {
        density: 'xhdpi',
        size: 96,
    },
    {
        density: 'xxhdpi',
        size: 144,
    },
    {
        density: 'xxxhdpi',
        size: 192,
    },
];
class Icons extends core_1.Command {
    async run() {
        const { args, flags } = await this.parse(Icons);
        const sourceFilesExists = (0, file_utils_1.checkAssetFile)(args.file);
        if (!sourceFilesExists) {
            this.error(`Source file ${(0, chalk_1.cyan)(args.file)} not found! ${(0, chalk_1.red)('ABORTING')}`);
        }
        if (!flags.appName) {
            this.error(`Failed to retrive ${(0, chalk_1.cyan)('appName')} value. Please specify it with the ${(0, chalk_1.green)('appName')} flag or check that ${(0, chalk_1.cyan)('app.json')} file exists. ${(0, chalk_1.red)('ABORTING')}`);
        }
        this.log(`Generating icons for '${flags.appName}' app...`);
        const iOSOutputDirPath = `./ios/${flags.appName}/Images.xcassets/AppIcon.appiconset`;
        const baseAndroidOutputDirPath = './android/app/src/main';
        const workflow = new Listr([
            {
                title: '🍎 iOS icons',
                task: () => new Listr([
                    {
                        title: 'Create assets folder',
                        task: () => (0, file_utils_1.mkdirp)(iOSOutputDirPath),
                    },
                    {
                        title: 'Generate icons',
                        task: () => {
                            const iOSIconsTasks = iOSIconSizes.flatMap(sizeDef => {
                                const { baseSize, name, scales } = sizeDef;
                                const iOSIconScaleTasks = scales.map(scale => {
                                    const filename = this.getIOSIconName(name, scale);
                                    const imageSize = baseSize * scale;
                                    return {
                                        title: `Generate icon ${filename}...`,
                                        task: () => sharp(args.file)
                                            .resize(imageSize, imageSize, { fit: 'cover' })
                                            .toFile((0, node_path_1.join)(iOSOutputDirPath, filename)),
                                    };
                                });
                                return iOSIconScaleTasks;
                            });
                            return new Listr(iOSIconsTasks);
                        },
                    },
                    {
                        title: 'Generate icons manifest',
                        task: () => {
                            const contentJson = {
                                images: [],
                                info: {
                                    author: 'react-native-toolbox',
                                    version: 1,
                                },
                            };
                            // Create Contents.json structure
                            for (const { baseSize, idiom, name, scales } of iOSIconSizes) {
                                for (const scale of scales) {
                                    contentJson.images.push({
                                        filename: this.getIOSIconName(name, scale),
                                        idiom: idiom || 'iphone',
                                        scale: `${scale}x`,
                                        size: `${baseSize}x${baseSize}`,
                                    });
                                }
                            }
                            return node_fs_1.promises.writeFile((0, node_path_1.join)(iOSOutputDirPath, 'Contents.json'), JSON.stringify(contentJson, null, 2));
                        },
                    },
                ]),
            },
            {
                title: '🤖 Android icons',
                task: () => new Listr([
                    {
                        title: 'Create assets folder',
                        task: () => (0, file_utils_1.mkdirp)(baseAndroidOutputDirPath),
                    },
                    {
                        title: 'Create web icon',
                        task: () => {
                            const outputFilePath = (0, node_path_1.join)(baseAndroidOutputDirPath, 'web_hi_res_512.png');
                            return this.generateAndroidIconRounded(args.file, outputFilePath, 512);
                        },
                    },
                    {
                        title: 'Create launcher icons',
                        task: () => {
                            const androidIconTasks = AndroidIconSizes.flatMap(({ density, size }) => {
                                const androidIconDensityTasks = [];
                                const densityFolderPath = (0, node_path_1.join)(baseAndroidOutputDirPath, `res/mipmap-${density}`);
                                const densityFolderTask = {
                                    title: `Create Android '${density}' assets folder`,
                                    task: () => (0, file_utils_1.mkdirp)(densityFolderPath),
                                };
                                androidIconDensityTasks.push(densityFolderTask);
                                const roundedFileName = 'ic_launcher.png';
                                const roundedAndroidIconTask = {
                                    title: `Generate icon ${roundedFileName}...`,
                                    task: () => this.generateAndroidIconRounded(args.file, (0, node_path_1.join)(densityFolderPath, roundedFileName), size),
                                };
                                androidIconDensityTasks.push(roundedAndroidIconTask);
                                const circleFileName = 'ic_launcher_round.png';
                                const circleAndroidIconTask = {
                                    title: `Generate icon ${circleFileName}...`,
                                    task: () => this.generateAndroidIconCircle(args.file, (0, node_path_1.join)(densityFolderPath, circleFileName), size),
                                };
                                androidIconDensityTasks.push(circleAndroidIconTask);
                                return androidIconDensityTasks;
                            });
                            return new Listr(androidIconTasks);
                        },
                    },
                ]),
            },
        ]);
        try {
            await workflow.run();
        }
        catch (error) {
            this.error(error);
        }
    }
    getIOSIconName(baseName, scale) {
        return `${baseName}${scale > 1 ? `@${scale}x` : ''}.png`;
    }
    generateAndroidIconRounded(inputPath, outputPath, size) {
        const roundedCorners = this.getMask(MaskType.roundedCorners, size);
        return this.generateAndroidIcon(inputPath, outputPath, size, roundedCorners);
    }
    generateAndroidIconCircle(inputPath, outputPath, size) {
        const circleIconMask = this.getMask(MaskType.circle, size);
        return this.generateAndroidIcon(inputPath, outputPath, size, circleIconMask);
    }
    generateAndroidIcon(inputPath, outputPath, size, mask) {
        return sharp(inputPath)
            .resize(size)
            .composite([
            {
                blend: 'dest-in',
                gravity: 'center',
                input: mask,
            },
        ])
            .toFile(outputPath);
    }
    getMask(type, size) {
        if (type === MaskType.roundedCorners) {
            const cornerRadius = Math.floor(size * 0.1); // Calculate 10% corner radius
            return Buffer.from(`<svg><rect x="0" y="0" width="${size}" height="${size}" rx="${cornerRadius}" ry="${cornerRadius}"/></svg>`);
        }
        const radius = Math.floor(size / 2);
        return Buffer.from(`<svg><circle cx="${radius}" cy="${radius}" r="${radius}" /></svg>`);
    }
}
exports.default = Icons;
Icons.description = `generate app icons
Generate app icons using FILE as base.
The base icon file should be at least 1024x1024px.
`;
Icons.flags = {
    help: core_1.Flags.help({ char: 'h' }),
    appName: core_1.Flags.string({
        char: 'a',
        description: "the appName used to build output assets path. Default is retrieved from 'app.json' file.",
        default: () => {
            try {
                const { name } = JSON.parse((0, node_fs_1.readFileSync)('./app.json', 'utf8'));
                return name;
            }
            catch {
                return null;
            }
        },
    }),
};
Icons.args = [
    {
        name: 'file',
        description: 'input icon file',
        required: false,
        default: './assets/icon.png',
        hidden: false,
    },
];
