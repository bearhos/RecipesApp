"use strict";
/*
 * Copyright (c) 2020 Mattia Panzeri <mattia.panzeri93@gmail.com>
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@oclif/core");
const chalk_1 = require("chalk");
const Listr = require("listr");
const node_fs_1 = require("node:fs");
const node_path_1 = require("node:path");
const sharp = require("sharp");
const file_utils_1 = require("../utils/file-utils");
const iOSSplashscreenSizes = [
    {
        height: 480,
        width: 320,
    },
    {
        density: '2x',
        height: 1334,
        width: 750,
    },
    {
        density: '3x',
        height: 2208,
        width: 1242,
    },
];
const AndroidSplashscreenSizes = [
    {
        density: 'ldpi',
        height: 320,
        width: 200,
    },
    {
        density: 'mdpi',
        height: 480,
        width: 320,
    },
    {
        density: 'hdpi',
        height: 800,
        width: 480,
    },
    {
        density: 'xhdpi',
        height: 1280,
        width: 720,
    },
    {
        density: 'xxhdpi',
        height: 1600,
        width: 960,
    },
    {
        density: 'xxxhdpi',
        height: 1920,
        width: 1280,
    },
];
class Splash extends core_1.Command {
    async run() {
        const { args, flags } = await this.parse(Splash);
        const sourceFilesExists = (0, file_utils_1.checkAssetFile)(args.file);
        if (!sourceFilesExists) {
            this.error(`Source file ${(0, chalk_1.cyan)(args.file)} not found! ${(0, chalk_1.red)('ABORTING')}`);
        }
        if (!flags.appName) {
            this.error(`Failed to retrive ${(0, chalk_1.cyan)('appName')} value. Please specify it with the ${(0, chalk_1.green)('appName')} flag or check that ${(0, chalk_1.cyan)('app.json')} file exists. ${(0, chalk_1.red)('ABORTING')}`);
        }
        this.log(`Generating splashscreens for '${flags.appName}' app...`);
        const iOSOutputDirPath = `./ios/${flags.appName}/Images.xcassets/Splashscreen.imageset`;
        const baseAndroidOutputDirPath = './android/app/src/main/res';
        const workflow = new Listr([
            {
                title: '🍎 iOS splashscreens',
                task: () => new Listr([
                    {
                        title: 'Create assets folder',
                        task: () => (0, file_utils_1.mkdirp)(iOSOutputDirPath),
                    },
                    {
                        title: 'Generate splashscreen',
                        task: () => {
                            const iOSSplashscreenTasks = iOSSplashscreenSizes.map(({ density, height, width }) => {
                                const filename = this.getIOSAssetNameForDensity(density);
                                const outputFile = (0, node_path_1.join)(iOSOutputDirPath, this.getIOSAssetNameForDensity(density));
                                return {
                                    title: `Generate ${filename}...`,
                                    task: () => this.generateSplashscreen(args.file, outputFile, width, height),
                                };
                            });
                            return new Listr(iOSSplashscreenTasks);
                        },
                    },
                    {
                        title: 'Generate splashscreens manifest',
                        task: () => {
                            const images = iOSSplashscreenSizes.map(({ density }) => ({
                                filename: this.getIOSAssetNameForDensity(density),
                                idiom: 'universal',
                                scale: `${density || '1x'}`,
                            }));
                            // Create Contents.json structure
                            const contentJson = {
                                images,
                                info: {
                                    author: 'react-native-toolbox',
                                    version: 1,
                                },
                            };
                            return node_fs_1.promises.writeFile((0, node_path_1.join)(iOSOutputDirPath, 'Contents.json'), JSON.stringify(contentJson, null, 2));
                        },
                    },
                ]),
            },
            {
                title: '🤖 Android splashscreens',
                task: () => new Listr([
                    {
                        title: 'Create assets folder',
                        task: () => (0, file_utils_1.mkdirp)(baseAndroidOutputDirPath),
                    },
                    {
                        title: 'Generate splashscreens',
                        task: () => {
                            const androidSplashTasks = AndroidSplashscreenSizes.flatMap(({ density, width, height }) => {
                                const res = [];
                                const densityFolderPath = (0, node_path_1.join)(baseAndroidOutputDirPath, `drawable-${density}`);
                                const densityFolderTask = {
                                    title: `Create Android '${density}' assets folder`,
                                    task: () => (0, file_utils_1.mkdirp)(densityFolderPath),
                                };
                                res.push(densityFolderTask);
                                const outputFile = (0, node_path_1.join)(densityFolderPath, 'splashscreen.png');
                                const densitySplashscreenTask = {
                                    title: `Generate ${(0, node_path_1.join)(`drawable-${density}`, 'splashscreen.png')}...`,
                                    task: () => this.generateSplashscreen(args.file, outputFile, width, height),
                                };
                                res.push(densitySplashscreenTask);
                                return res;
                            });
                            return new Listr(androidSplashTasks);
                        },
                    },
                ]),
            },
        ]);
        try {
            await workflow.run();
        }
        catch (error) {
            this.error(error);
        }
    }
    getIOSAssetNameForDensity(density) {
        return `splashscreen${density ? `@${density}` : ''}.png`;
    }
    async generateSplashscreen(inputFilePath, outputFilePath, width, height) {
        return sharp(inputFilePath)
            .resize(width, height, { fit: 'cover' })
            .toFile(outputFilePath);
    }
}
exports.default = Splash;
Splash.description = `generate app splashscreen for react-native-splash-screen
Generate app splashscreen using FILE as base to be used with crazycodeboy/react-native-splash-screen module.
The base splashscreen file should be at least 1242x2208px.
`;
Splash.flags = {
    help: core_1.Flags.help({ char: 'h' }),
    appName: core_1.Flags.string({
        char: 'a',
        description: "the appName used to build output assets path. Default is retrieved from 'app.json' file.",
        default: () => {
            try {
                const { name } = JSON.parse((0, node_fs_1.readFileSync)('./app.json', 'utf8'));
                return name;
            }
            catch {
                return null;
            }
        },
    }),
};
Splash.args = [
    {
        name: 'file',
        description: 'input splashscreen file',
        required: false,
        default: './assets/splashscreen.png',
        hidden: false,
    },
];
